using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.LWRP;

public class ResouceDBGenerate : MonoBehaviour
{
    private static string ResourcesFolder = "Resources";

    [MenuItem("Tools/CodeGen/Generate resource helper")]
    static void GenerateResourceHelper()
    {
        Debug.Log(Application.dataPath);
        var resourcesPath = Application.dataPath + "/" + ResourcesFolder;
        var savePath = Application.dataPath + "/Scripts/ScriptableObjectsFramework/__Generated__/ResDB.cs";
        Debug.Log(resourcesPath);
        string generated = AddLine("// ATTENTION!", 0);
        generated += AddLine("// THIS FILE IS AUTO GENERATED BY CODE GENERATOR.", 0);
        generated += AddLine("// DONT TRY TO CHANGE IT MANUALY!", 0);
        generated += AddLine("using UnityEngine;", 0);
        generated += StartGenClass("ResDB", 0);
        generated += ProcessDirectory(resourcesPath, resourcesPath, 0);
        generated += FinishGenClass("ResDB", 0);
        File.WriteAllText(savePath, generated);
    }

    static string StartGenClass(string className, int depth)
    {
        string generated = "\n";
        generated += AddLine("public static class "+ className+ " {", depth);
        return generated;
    }

    static string FinishGenClass(string className, int depth)
    {
        string generated = "";
        generated += AddLine("} // end of class "+className, depth);
        return generated;
    }

    static string AddLine(string str, int depth)
    {
        return String.Concat(Enumerable.Repeat("\t", depth)) + str + "\n";
    }

    static string ProcessDirectory(string path, string startPath, int depth)
    {
        string generated = "";
        var assetsFiles = Directory.GetFiles(path, "*.asset");
        foreach (var asset in assetsFiles)
        {
            generated += ProcessAsset(asset, startPath, depth + 1);
        }
        var assetsPrefabs = Directory.GetFiles(path, "*.prefab");
        foreach (var prefab in assetsPrefabs)
        {
            generated += ProcessPrefabs(prefab, startPath, depth + 1);
        }
        var directories = Directory.GetDirectories(path);
        foreach (var folder in directories)
        {
            var name = GetResourceName(folder);
            generated += StartGenClass(name, depth);
            generated += ProcessDirectory(folder, startPath, depth+1);
            generated += FinishGenClass(name, depth);
        }

        return generated;
    }

    static string GetResourcePath(string fileName)
    {
        var folder = Path.GetDirectoryName(fileName);
        var resIndex = folder.IndexOf(ResourcesFolder);
        folder = folder.Remove(0, resIndex + ResourcesFolder.Length);
        folder = folder.Replace("\\", "/");
        if(folder != "")
        {
            folder = folder.Remove(0, 1);
            folder += "/";
        }

        return folder;
    }

    static string GetResourceName(string fileName)
    {
        return Path.GetFileNameWithoutExtension(fileName);
    }

    static string GetFullResourceName(string fileName)
    {
        var name = GetResourceName(fileName);
        var folder = GetResourcePath(fileName);
        return folder + name;
    }

    static string ProcessAsset(string assetName, string startPath, int depth)
    {
        var resourceName = GetFullResourceName(assetName);
        string name = GetResourceName(assetName);
        var obj = Resources.Load(resourceName);
        string objCache = name + "ObjCache";
        Type type = obj.GetType();
        if (type == typeof(LightweightRenderPipelineAsset))
            return "";
        if (!(type.IsSubclassOf(typeof(ScriptableObject))))
            return "";
        string generated = AddLine("static " + type.Name + " "+ objCache + " = null; // object cache", depth);
        generated += AddLine("public static " + type.Name + " " + name + "Asset() {", depth);
        generated += AddLine("if ("+objCache+"==null)", depth + 1);
        generated += AddLine(objCache + " = Resources.Load<"+type.Name+">(\""+resourceName+"\");", depth + 2);
        generated += AddLine("return "+objCache+";", depth+1);
        generated += AddLine("} // end method "+name+"Asset", depth);
        generated += AddLine("", depth);
        return generated;
    }

    static string ProcessPrefabs(string prefabName, string startPath, int depth)
    {
        var resourceName = GetFullResourceName(prefabName);
        string name = GetResourceName(prefabName);
        var obj = Resources.Load(resourceName);
        Type type = obj.GetType();
        string methodName = name + "Prefab";
        // generate simple class
        string generated = AddLine("public static GameObject " + methodName + "() {", depth);
        generated += AddLine("return Resources.Load<GameObject>(\"" + resourceName + "\");", depth + 1);
        generated += AddLine("} // end method " + name + "Asset", depth);
        generated += AddLine("", depth);
        // generate generic class
        generated += AddLine("public static T " + methodName + "<T>() {", depth);
        generated += AddLine("var go = "+ methodName + "();", depth + 1);
        generated += AddLine("return go.GetComponent<T>();", depth + 1);
        generated += AddLine("} // end method " + methodName, depth);
        generated += AddLine("", depth);
        return generated;
    }
}
